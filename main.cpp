#include "GOST3411.h"

namespace dataForTests
{
	//хеш код сообщения из пункта A.2 приложения A (пример 1) для функции хеширования с длиной хеша 512 бит
	const uint8_t MESSAGE_TEST_1_HASH_512_BITS[63] = 
	{
			0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
			0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
			0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39,
			0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
			0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33,
			0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
			0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
			0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30 
	};

	//хеш код сообщения из пункта A.2.3 приложения A (пример 1) для функции хеширования с длиной хеша 256 бит
	const uint8_t MESSAGE_TEST_2_HASH_256_BITS[63] = 
	{
		0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
		0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
		0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39,
		0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
		0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33,
		0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
		0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
		0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30 
	};

	//хеш код сообщения из пункта A.3 приложения A (пример 2) для функции хеширования с длиной хеша 512 бит
	const uint8_t MESSAGE_TEST_3_HASH_512_BITS[72] = 
	{
		0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20,
		0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb,
		0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed,
		0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2,
		0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
		0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c,
		0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6,
		0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c,
		0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1 
	};

	//хеш код сообщения из пункта A.3.3 приложения A (пример 2) для функции хеширования с длиной хеша 256 бит
	const uint8_t MESSAGE_TEST_4_HASH_256_BITS[72] = 
	{
		0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20,
		0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb,
		0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed,
		0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2,
		0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
		0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c,
		0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6,
		0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c,
		0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1 
	};

}

int main()
{
	GOST3411 test1(512);
	test1.getHash(dataForTests::MESSAGE_TEST_1_HASH_512_BITS, 63);
	GOST3411 test2(256);
	test2.getHash(dataForTests::MESSAGE_TEST_2_HASH_256_BITS, 63);
	GOST3411 test3(512);
	test3.getHash(dataForTests::MESSAGE_TEST_3_HASH_512_BITS, 72);
	GOST3411 test4(256);
	test4.getHash(dataForTests::MESSAGE_TEST_4_HASH_256_BITS, 72);
	return 0;
}
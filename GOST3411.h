#pragma once
#include "const.h"
#include <algorithm>
#include <iomanip>

class GOST3411
{
private:
	//значения инициализационного вектора для функции с длиной хеш-кода 512 бит
	uint8_t iv512[64] = 
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	//значения инициализационного вектора для функции с длиной хеш-кода 256 бит
	uint8_t iv256[64] = 
	{
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	};

	const uint8_t SIZE_BLOCK_BYTES = 64;
	uint16_t sizeHash = 0;

	uint8_t* h = nullptr;					//промежуточный результат вычислений
	uint8_t* N = nullptr;					//нулевая матрица
	uint8_t* checksum = nullptr;			//контрольная сумма
	uint8_t* bufferDataBlock = nullptr;		//размер буффера блока данных
	uint8_t* hash = nullptr;				//размер хеша

	void conversionX(uint8_t* inputVector, uint8_t* gamma, uint8_t* result);

	void conversionAdd512(uint8_t* a, uint8_t* b, uint8_t* result);

	void conversionS(uint8_t* inputVector);
	void conversionP(uint8_t* inputVector);
	void conversionL(uint8_t* inputVector);

	void conversionE(uint8_t* m, uint8_t* K, uint8_t* result);
	void conversionG(uint8_t* h, uint8_t* N, uint8_t* m);

	void paddingBlock(const uint16_t& sizeBlockBytes, uint8_t* blockData);

	void secondStage(uint8_t* blockData);
	void thirdStage(uint8_t* blockData, const uint16_t& sizeBlockBytesM);

	void getRoundKey(uint8_t* K, const int& i);

	void initializationStage();

	void conversionMSB();

public:
	GOST3411() = delete;
	GOST3411(const uint16_t& sizeHash);
	~GOST3411();
	void getHash(const uint8_t* blockData, const uint32_t& sizeBlockDataBytes);
};
